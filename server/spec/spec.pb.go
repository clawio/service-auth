// Code generated by protoc-gen-go.
// source: spec.proto
// DO NOT EDIT!

/*
Package spec is a generated protocol buffer package.

It is generated from these files:
	spec.proto

It has these top-level messages:
	AuthNRequest
	AuthNResponse
	VerifyRequest
	VerifyResponse
	Identity
*/
package spec

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type AuthNRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AuthNRequest) Reset()                    { *m = AuthNRequest{} }
func (m *AuthNRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthNRequest) ProtoMessage()               {}
func (*AuthNRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AuthNResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AuthNResponse) Reset()                    { *m = AuthNResponse{} }
func (m *AuthNResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthNResponse) ProtoMessage()               {}
func (*AuthNResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type VerifyRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *VerifyRequest) Reset()                    { *m = VerifyRequest{} }
func (m *VerifyRequest) String() string            { return proto.CompactTextString(m) }
func (*VerifyRequest) ProtoMessage()               {}
func (*VerifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type VerifyResponse struct {
	Identity *Identity `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
}

func (m *VerifyResponse) Reset()                    { *m = VerifyResponse{} }
func (m *VerifyResponse) String() string            { return proto.CompactTextString(m) }
func (*VerifyResponse) ProtoMessage()               {}
func (*VerifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VerifyResponse) GetIdentity() *Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

type Identity struct {
	Username    string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Email       string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=display_name" json:"display_name,omitempty"`
}

func (m *Identity) Reset()                    { *m = Identity{} }
func (m *Identity) String() string            { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()               {}
func (*Identity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*AuthNRequest)(nil), "spec.AuthNRequest")
	proto.RegisterType((*AuthNResponse)(nil), "spec.AuthNResponse")
	proto.RegisterType((*VerifyRequest)(nil), "spec.VerifyRequest")
	proto.RegisterType((*VerifyResponse)(nil), "spec.VerifyResponse")
	proto.RegisterType((*Identity)(nil), "spec.Identity")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for AuthN service

type AuthNClient interface {
	Authenticate(ctx context.Context, in *AuthNRequest, opts ...grpc.CallOption) (*AuthNResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
}

type authNClient struct {
	cc *grpc.ClientConn
}

func NewAuthNClient(cc *grpc.ClientConn) AuthNClient {
	return &authNClient{cc}
}

func (c *authNClient) Authenticate(ctx context.Context, in *AuthNRequest, opts ...grpc.CallOption) (*AuthNResponse, error) {
	out := new(AuthNResponse)
	err := grpc.Invoke(ctx, "/spec.AuthN/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := grpc.Invoke(ctx, "/spec.AuthN/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthN service

type AuthNServer interface {
	Authenticate(context.Context, *AuthNRequest) (*AuthNResponse, error)
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
}

func RegisterAuthNServer(s *grpc.Server, srv AuthNServer) {
	s.RegisterService(&_AuthN_serviceDesc, srv)
}

func _AuthN_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AuthNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AuthNServer).Authenticate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _AuthN_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AuthNServer).Verify(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _AuthN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spec.AuthN",
	HandlerType: (*AuthNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthN_Authenticate_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _AuthN_Verify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x3b, 0x4f, 0x03, 0x31,
	0x0c, 0x80, 0x29, 0xd0, 0xea, 0x30, 0x6d, 0x85, 0x4c, 0x87, 0xaa, 0x03, 0xaa, 0x6e, 0x62, 0xea,
	0x10, 0xc4, 0xc0, 0xd8, 0x91, 0x85, 0x81, 0x81, 0x15, 0x85, 0x9e, 0x11, 0x11, 0x6d, 0x12, 0xe2,
	0x9c, 0x50, 0xfe, 0x3d, 0xe4, 0x25, 0x71, 0xa8, 0x9b, 0xf5, 0xf9, 0xf5, 0xd9, 0x00, 0x6c, 0x69,
	0xb7, 0xb1, 0xce, 0x78, 0x83, 0xe7, 0x31, 0x6e, 0x05, 0x4c, 0xb7, 0xbd, 0xff, 0x78, 0x7a, 0xa6,
	0xaf, 0x9e, 0xd8, 0xe3, 0x15, 0x34, 0x3d, 0x93, 0xd3, 0xf2, 0x40, 0xcb, 0xd1, 0x7a, 0x74, 0x7b,
	0x11, 0x89, 0x95, 0xcc, 0xdf, 0xc6, 0x75, 0xcb, 0xd3, 0x48, 0xda, 0x1b, 0x98, 0x95, 0x1e, 0xb6,
	0x46, 0x33, 0xe1, 0x0c, 0xc6, 0xde, 0x7c, 0x92, 0xce, 0x1d, 0x31, 0xff, 0x42, 0x4e, 0xbd, 0x87,
	0x3a, 0xf4, 0x5f, 0x5e, 0xc0, 0xbc, 0xe6, 0xcb, 0x80, 0x35, 0x34, 0xaa, 0x23, 0xed, 0x95, 0x0f,
	0xa9, 0xe6, 0x52, 0xcc, 0x37, 0x49, 0xf5, 0xb1, 0xd0, 0x76, 0x0b, 0x4d, 0x8d, 0x8f, 0x38, 0xfe,
	0x2e, 0xa0, 0x83, 0x54, 0xfb, 0x2c, 0x88, 0x0b, 0x98, 0x76, 0x8a, 0xed, 0x5e, 0x86, 0xd7, 0x54,
	0x74, 0x16, 0xa9, 0x08, 0x30, 0x4e, 0xda, 0xf8, 0x90, 0x6f, 0x8e, 0xd3, 0x76, 0xd2, 0x13, 0x62,
	0xde, 0xf5, 0xf7, 0x0f, 0xab, 0xeb, 0x01, 0xcb, 0x9a, 0xed, 0x09, 0xde, 0xc3, 0x24, 0xab, 0x63,
	0x29, 0x18, 0x1c, 0xba, 0x5a, 0x0c, 0x61, 0x6d, 0x7b, 0x9b, 0xa4, 0x97, 0xdf, 0xfd, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xb6, 0x52, 0xcc, 0x52, 0x80, 0x01, 0x00, 0x00,
}
